class BrowserMatch {

    static getOS() {
        if (navigator.platform.indexOf("Win") != -1) return "Windows";
        if (navigator.platform.indexOf("Mac") != -1) return "Mac";
        if (navigator.platform.indexOf("Linux") != -1) return "Linux";
        if (navigator.userAgent.indexOf("iPhone") != -1) return "iPhone/iPod";
    }

    static getBrowser() {
        const rMsie = /(msie\s|trident\/7)([\w\.]+)/;
        const rTrident = /(trident)\/([\w.]+)/;
        const rFirefox = /(firefox)\/([\w.]+)/;
        const rOpera = /(opera).+version\/([\w.]+)/;
        const rNewOpera = /(opr)\/(.+)/;
        const rChrome = /(chrome)\/([\w.]+)/;
        const rSafari = /version\/([\w.]+).*(safari)/;
        const ua = navigator.userAgent.toLowerCase();
        let matchBS, matchBS2;
        matchBS = rMsie.exec(ua);
        if (matchBS != null) {
            matchBS2 = rTrident.exec(ua);
            if (matchBS2 != null) {
                switch (matchBS2[2]) {
                    case "4.0":
                        return {browser: "IE", version: "8"};
                    case "5.0":
                        return {browser: "IE", version: "9"};
                    case "6.0":
                        return {browser: "IE", version: "10"};
                    case "7.0":
                        return {browser: "IE", version: "11"};
                    default:
                        return {browser: "IE", version: "Undefined"};
                }
            } else {
                return {browser: "IE", version: matchBS[2] || "0"};
            }
        }
        matchBS = rFirefox.exec(ua);
        if ((matchBS != null) && (!(window.attachEvent)) && (!(window.chrome)) && (!(window.opera))) {
            return {browser: matchBS[1] || "", version: matchBS[2] || "0"};
        }
        matchBS = rOpera.exec(ua);
        if ((matchBS != null) && (!(window.attachEvent))) {
            return {browser: matchBS[1] || "", version: matchBS[2] || "0"};
        }
        matchBS = rChrome.exec(ua);
        if ((matchBS != null) && (!!(window.chrome)) && (!(window.attachEvent))) {
            matchBS2 = rNewOpera.exec(ua);
            if (matchBS2 == null) {
                return {browser: matchBS[1] || "", version: matchBS[2] || "0"};
            } else {
                return {browser: "opera", version: matchBS2[2] || "0"};
            }
        }
        matchBS = rSafari.exec(ua);
        if ((matchBS != null) && (!(window.attachEvent)) && (!(window.chrome)) && (!(window.opera))) {
            return {browser: matchBS[2] || "", version: matchBS[1] || "0"};
        }
        return {browser: 'unknow', version: '0'}
    }

    static getBrowserV() {
        const browser = this.getBrowser();
        try {
            browser.versionCode = parseInt(browser.version, 10);
        } catch (e) {
            browser.versionCode = 0;
        }
        return browser;
    }
}

export default BrowserMatch;